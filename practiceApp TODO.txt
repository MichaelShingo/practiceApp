Tracks progress on etude books, repertoire, scales
Sends data to AI to provide next practice recommendations
Allows marking of how much you mastered it so you can comeback later and review ones that had trouble. 
	- mastery level determines the color/hue of the progress bar
- search, sort, filter the pieces, and it shows the overall progress based on the filtered items 
Provides tutorial videos and recordings
Can it provide notifications (text or email) about practice reminders, practice inspiration.
- view that shows which techniques you have worked on the most 
- track last time a piece was practiced 
- data dashboard that shows some useful information
	- like a github-type calendar that shows days that you completed pieces 
	- percentages of pieces completed at each difficulty level 
	- breakdown of composers you've worked on 
	- which techniques you've worked on the most
***************************

- pieces is filtered to filteredPieces,
	- filteredPiecesIDs updates when filteredPieces updates
	- Category setCount runs when filteredPiecesIDs updates


- also update the mastery level in the local state
	- Issue: you're searching through the entire list of userPieces to update
	a single piece, every single time a user clicks to update mastery
	- Is this why you need Redux?
	- You have to stop the updatemastery of existing piece from runnining at the start of the application. 

- when you search, then you clear the search, the color is messed up. '
	- because every time a piece comes back after being filtered out, initial useEffect() in PIeceList.js runs, adds to mastery level again. 
	- instead of removing the piece entirely from the list of pieces displayed, can you just set visibility of piece element to hidden? Maybe filter pieces, and if the piece is not in filtered pieces.....hide 
	- can you subtract from the mastery count when the filter activates??
	

- when you clear a filter, it make API call to update the piece in the database, same when you first load the application....prevent this 
- create a separate field "Sorting Title" so the pieces appear in the correct order 
- have different preset views like, Suzuki Books, Essential Elements, major concertos, bach s&p....

- Create + More dialogue.
- Create search function - should this switch to no-category view? 
- Create clickable technique tags 
- create sorting for [mastery level, difficulty, 
- see only completed/not completed 
- search by difficulty level (greater than, less than, equal to)
- create overall progress bar (can this update based on your search?)


- Implement dark theme with useContext?
- add a category difficulty field and sort by this default

- WHAT HAPPENS IF YOU HAVE THE SAME PAGE OPEN ON MULTIPLE TABS/DEVICES? 

- prevent duplicates based on (pieceID, userID) 



- Do you need to override rest_framework/serializers


- Violin Roadmap


- Probably should consider how the UI works before creating all the endpoints
	- Function for filtering and sorting by all fields (composer, period, difficulty, type), sort by difficulty by default, but can specify other sorting parameters
	- Based on the filtered query, display data in a table divided by category (GET all categories endpoint) 
	- Overall progress bar
	
	
- Consider all the endpoints you need 
	- User post piece to completed list with mastery level
	- User GET completed pieces
	- User DELETE piece from completed list 
	- View all pieces that use Technique X
	- View all Pieces by Composer X
	- View all pieces from Period X
	- View pieces by difficulty level
	- Should be able to combine these queries 
	- View all Pieces with Type X
	- Search by custom input
	- Individual piece view 
	
	


{
    "email":"miko@gmail.com",
    "password":"johnson&&&",
    "first_name":"Miko",
    "last_name":"Single"
}



{
    "email":"mango@gmail.com",
    "password":"mian",
    "first_name":"Mango",
    "last_name":"Mian"
}

{
    "email":"dango@gmail.com",
    "password":"dango",
    "first_name":"Dango",
    "last_name":"Mian"
}


Superuser
mcrawford5376@gmail.com
1234


Type of Pieces
- Sonata
- Etude
- Scale
- Arpeggio
- Concerto
- Miniature
- Showpiece
- Exercise
- Suite


INSERT INTO pieces_technique (name, description, tutorial)
VALUES ('left hand articulation', 'placeholder', 'placeholder');


	
	
from rest_framework import serializers
from .models import Techniques

class TechniquesSerializer(serializers.ModelSerializer):
    class Meta:
        model = Techniques
        fields = '__all__'