- Sends data to AI to provide next practice recommendations
- Provides tutorial videos and recordings
- Can it provide notifications (text or email) about practice reminders, practice inspiration.
- track last time a user piece object was updated
- boosted type of feature that times your practice sessions
- can you add notes about your practice to each piece? 
- data dashboard that shows some useful information
	- like a github-type calendar that shows days that you completed pieces 
	- percentages of pieces completed at each difficulty level 
	- breakdown of composers you've worked on 
	- which techniques you've worked on the most
***************************


- selecting technique tag causes formatting change....
- loading animation for the table and detail dialogue, on first load and on search 
- to fix mastery color issues, can you do clean up after useEffect when each piece dismounts? 
- sorting - are you sorting by pieces or by category? Maybe for this you should have a separate view? 

- when you search, then you clear the search, the color is messed up. '
	- because every time a piece comes back after being filtered out, initial useEffect() in PIeceList.js runs, adds to mastery level again. 
	- instead of removing the piece entirely from the list of pieces displayed, can you just set visibility of piece element to hidden? Maybe filter pieces, and if the piece is not in filtered pieces.....hide 
	- can you subtract from the mastery count when the filter activates??

- loading gif (can you make it music-y?)
- create a separate field "Sorting Title" so the pieces appear in the correct order
- add more data so you know how it's going to run in reality 
- have different preset views like, Suzuki Books, Essential Elements, major concertos, bach s&p....

- create sorting for [mastery level, difficulty, 
- see only completed/not completed 
- create overall progress bar (can this update based on your search?)


- Implement dark theme with useContext?
- add a category difficulty field and sort by this default (NO BECAUSE IS KREUTZER 1 AS HARD AS KREUTZER 42?)

- WHAT HAPPENS IF YOU HAVE THE SAME PAGE OPEN ON MULTIPLE TABS/DEVICES? 

- prevent duplicates based on (pieceID, userID) (BACKEND) 



- Do you need to override rest_framework/serializers


- Violin Roadmap


- Probably should consider how the UI works before creating all the endpoints
	- Function for filtering and sorting by all fields (composer, period, difficulty, type), sort by difficulty by default, but can specify other sorting parameters
	- Based on the filtered query, display data in a table divided by category (GET all categories endpoint) 
	- Overall progress bar
	
	
- Consider all the endpoints you need 
	- User post piece to completed list with mastery level
	- User GET completed pieces
	- User DELETE piece from completed list 
	- View all pieces that use Technique X
	- View all Pieces by Composer X
	- View all pieces from Period X
	- View pieces by difficulty level
	- Should be able to combine these queries 
	- View all Pieces with Type X
	- Search by custom input
	- Individual piece view 
	
	


{
    "email":"miko@gmail.com",
    "password":"johnson&&&",
    "first_name":"Miko",
    "last_name":"Single"
}



{
    "email":"mango@gmail.com",
    "password":"mian",
    "first_name":"Mango",
    "last_name":"Mian"
}

{
    "email":"dango@gmail.com",
    "password":"dango",
    "first_name":"Dango",
    "last_name":"Mian"
}


Superuser
mcrawford5376@gmail.com
1234


Type of Pieces
- Sonata
- Etude
- Scale
- Arpeggio
- Concerto
- Miniature
- Showpiece
- Exercise
- Suite


INSERT INTO pieces_technique (name, description, tutorial)
VALUES ('left hand articulation', 'placeholder', 'placeholder');


	
	
from rest_framework import serializers
from .models import Techniques

class TechniquesSerializer(serializers.ModelSerializer):
    class Meta:
        model = Techniques
        fields = '__all__'