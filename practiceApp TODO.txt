Tracks progress on etude books, repertoire, scales
Sends data to AI to provide next practice recommendations
Allows marking of how much you mastered it so you can comeback later and review ones that had trouble. 
	- mastery level determines the color/hue of the progress bar
- search, sort, filter the pieces, and it shows the overall progress based on the filtered items 
Provides tutorial videos and recordings
Can it provide notifications (text or email) about practice reminders, practice inspiration.
- view that shows which techniques you have worked on the most 
- track last time a piece was practiced 

***************************

- WHAT HAPPENS IF YOU HAVE THE SAME PAGE OPEN ON MULTIPLE TABS/DEVICES? 


- when you click on mastery while the entry is not checked yet, it breaks the application


- what if you click on mastery or check without authentication? Direct to login page. Or make a popup that let's them click

- reset local storage on logout
- allow fetching pieces when logged out 

- piece get checked when you edit the mastery level
- make user data to completion, etc.
- map progress bar and color to competion/mastery 


- Do you need to override rest_framework/serializers


- Violin Roadmap


- Probably should consider how the UI works before creating all the endpoints
	- Function for filtering and sorting by all fields (composer, period, difficulty, type), sort by difficulty by default, but can specify other sorting parameters
	- Based on the filtered query, display data in a table divided by category (GET all categories endpoint) 
	- Overall progress bar
	
	
- Consider all the endpoints you need 
	- User post piece to completed list with mastery level
	- User GET completed pieces
	- User DELETE piece from completed list 
	- View all pieces that use Technique X
	- View all Pieces by Composer X
	- View all pieces from Period X
	- View pieces by difficulty level
	- Should be able to combine these queries 
	- View all Pieces with Type X
	- Search by custom input
	- Individual piece view 
	
	


{
    "email":"miko@gmail.com",
    "password":"johnson&&&",
    "first_name":"Miko",
    "last_name":"Single"
}



{
    "email":"mango@gmail.com",
    "password":"mian",
    "first_name":"Mango",
    "last_name":"Mian"
}

{
    "email":"dango@gmail.com",
    "password":"dango",
    "first_name":"Dango",
    "last_name":"Mian"
}


Superuser
mcrawford5376@gmail.com
1234


Type of Pieces
- Sonata
- Etude
- Scale
- Arpeggio
- Concerto
- Miniature
- Showpiece
- Exercise
- Suite


INSERT INTO pieces_technique (name, description, tutorial)
VALUES ('left hand articulation', 'placeholder', 'placeholder');


	
	
from rest_framework import serializers
from .models import Techniques

class TechniquesSerializer(serializers.ModelSerializer):
    class Meta:
        model = Techniques
        fields = '__all__'